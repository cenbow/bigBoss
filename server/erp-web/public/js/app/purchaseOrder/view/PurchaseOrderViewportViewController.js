/*
 * File: app/view/PurchaseOrderViewportViewController.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PurchaseOrder.view.PurchaseOrderViewportViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.purchaseorderviewport',


    onCommandColumnClick: function (btn, event) {
        var viewCtr = this,
            command = btn.command,
            grid = viewCtr.lookupReference('purchaseOrderGrid'),
            record = btn.ownerCt.getWidgetRecord();

        event.stopEvent();
        grid.getSelectionModel().select(record);

        if (command == 'Update') {
            viewCtr._update(record);
        } else if (command == 'Cancel') {
            viewCtr._cancelOrCompleted(record,command);
        } else if (command == 'Completed') {
            viewCtr._cancelOrCompleted(record,command);
        } else if (command == 'Print') {
            viewCtr._print(record);
        }
    },

    _print: function(record) {
        var dialog = Ext.create('Common.view.PrintWindow', {
            printOption: {
                url: '/api/purchase/order-print.html',
                method: 'POST',
                params: {id: record.id}
            }
        });
        dialog.show();
    },
    /**
     * 新增采购单
     */
    addPurchaseOrder: function(button, e) {
        this._openWindow(false);
    },
    _update: function (record){
        var me = this;
        var winComp = Ext.create("PurchaseOrder.view.PurchaseOrderWindow",{
            parent: me.getView(),
            callback: me.refreshGrid,
            scope: me
        });
        var id = record.get('id');
        var isEdit = true;

        var form = winComp.lookupReference('form').getForm();
        form.load({
            url: '/api/purchase/order/find/' + id,
            method: 'post',
            success: function (form,action) {
                me._openWindow(isEdit,action.result.data,id);
            }
        });
    },
    _openWindow: function (isEdit,data,id) {
        var me = this;
        var winComp = Ext.create("PurchaseOrder.view.PurchaseOrderWindow",{
            parent: me.getView(),
            callback: me.refreshGrid,
            scope: me
        });
        var vm = winComp.getViewModel();
        var orderDetailWindowStore = vm.getStore('OrderDetailWindowStore');
        vm.set('isEdit',isEdit);

        if(isEdit){
            vm.set("formData", {'id':id});
            vm.set('formData',data);
            var status = data.status;
            if('DRAFT' == status || 'PENDING_RECEIVE' == status){
                vm.set('hideCancelBtn',false);
            }
            if('DRAFT' == status ){
                vm.set('hideDraftBtn',false);
            }
            var lineList = data.lineVOList;
            if(lineList&&lineList.length>0){
                orderDetailWindowStore.loadData(lineList);
            }
        }else {
            vm.set('hideDraftBtn',false);
        }
        var purchaseOrder = orderDetailWindowStore.getModel();
        var record = new purchaseOrder();
        record.set('purchaseQty',1);
        record.set('proportion',1);
        record.set('quantity',1);
        record.set('price',0.00);
        orderDetailWindowStore.add(record);
        winComp.show();
    },
    _cancelOrCompleted: function (record,command){
        var id = record.get('id');
        var vm = this.getViewModel();
        var me = this;
        var gridStore  =  vm.getStore('PurchaseOrderGridStore');
        var msg = '';
        var tipTitle = '';
        var checkUrl = '';
        var url = '';
        if(command === 'Cancel'){
            msg = '确认取消本次采购吗';
            tipTitle = '采购订单取消';
            checkUrl = '/api/purchase/order/cancel/check/'+id;
            url = '/api/purchase/order/cancel/'+id;
        }else{
            msg = '确认完结本次订单吗</br>（注：请确保采购款项已结清）';
            tipTitle = '确认完结';
            checkUrl = '/api/purchase/order/complete/check/'+id;
            url = '/api/purchase/order/complete/'+id;
        }
        this._cancelOrCompletedCheck(checkUrl).then(function (response) {
            var resopnseText = response.responseText;
            var responseObj = JSON.parse(resopnseText);

            if(responseObj.error){
                TipsUtil.showTips('提示',responseObj.error.message);
                return;
            }else {
                if(responseObj.data.type == 'warn'&& command == 'Cancel'){
                    msg='已付款，确认取消本次采购吗？';
                }else if(responseObj.data.type == 'warn'&& command == 'Completed'){
                    tipTitle = '强制完结';
                    msg='本次采购尚未完成，确认强制完结吗？</br>（注：完结后，采购单将不能进行采购付款，请确保当前采购款项已结清!）？';
                }
            }
            Ext.MessageBox.confirm(tipTitle, msg,function(option){
                if(option === 'yes'){
                    Ext.Ajax.request({
                        url:url,
                        method: 'POST',
                        success: function (response, options) {
                            var resopnseText = response.responseText;
                            var responseObj = JSON.parse(resopnseText);
                            if(responseObj.error){
                                TipsUtil.showTips('提示',responseObj.error.message);
                            }else{
                                gridStore.load();
                            }

                        }
                    })
                }
            })
        })

    },
    _cancelOrCompletedCheck: function (checkUrl) {
        var deferred = new Ext.Deferred();
        Ext.Ajax.request({
            url:checkUrl,
            method: 'POST',
            success: function (response, options) {
                deferred.resolve(response);
            }
        })
        return deferred.promise;
    },
    /**
     * 搜索商品
     * @param field
     */
    onButtonGoodsChooseClick: function (field) {
        var me = this;
        var view = me.getView();
        var dialog = Ext.create('Common.view.GoodsChooseDialog', {
            callback: function (records) {
                var arr = [];
                if (!records) {
                    return;
                }
                Ext.Array.each(records, function (record) {
                    arr.push(record.skuCode);
                });
                field.setValue(arr.join(','));
            }
        });
        var dialogStore = dialog.getViewModel().getStore("gridStore");
        dialogStore.load();
        dialog.show();
    },

    /**
     * 搜索
     */
    onButtonSearchClick: function () {
        var me = this;
        var view = me.getView();
        var viewModel = me.getViewModel();
        var form = view.down('form');
        var formData = form.getValues();
        var store = viewModel.get('PurchaseOrderGridStore');
        store.getProxy().extraParams = formData;
        store.load();
    },
    /**
     * 清空
     */
    onButtonClearClick: function () {
        var me = this;
        var view = me.getView();
        var viewModel = me.getViewModel();
        var form = view.down('form');
        form.reset();

        var store = viewModel.get('PurchaseOrderGridStore');
        store.getProxy().extraParams = {};
        store.loadPage(1);
    },

    onGridpanelRowClick: function(tableview, record, tr, rowIndex, e, eOpts) {
        var vm = this.getViewModel();
        var orderDetailStore = vm.getStore('PurchaseOrderDetailStore');
        var paymentStore = vm.getStore('PurchasePaymentStore');
        var id = record.get('id');
        orderDetailStore.getProxy().setExtraParams({id: id});
        orderDetailStore.load();
        paymentStore.getProxy().setExtraParams({id: id});
        paymentStore.load();
    },

    refreshGrid: function () {
        var view = this.parent;
        view.lookupReference('searchBtn').fireEvent('click');
    }

});
