/*
 * File: app/view/PurchaseOrderWindowViewController.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PurchaseOrder.view.PurchaseOrderWindowViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.purchaseorderwindow',
    saveDraft: function (button, e, eOpts) {
        this.save('draft');
    },
    savePending: function (button, e, eOpts) {
        this.save('pending');
    },
    cancel: function (button, e, eOpts) {
        var vm = this.getViewModel();
        var formData = vm.get('formData');
        var  id = formData.id;
        var me = this;
        var gridStore  =  Ext.getStore('PurchaseOrderGridStore');
        var url = '',
            msg = '确认取消本次采购吗',
            tipTitle = '采购订单取消',
            checkUrl = '/api/purchase/order/cancel/check/'+id,
            url = '/api/purchase/order/cancel/'+id;
        me._cancelCheck(checkUrl).then(function (response) {
            var resopnseText = response.responseText;
            var responseObj = JSON.parse(resopnseText);
            if(responseObj.error){
                TipsUtil.showTips('提示',responseObj.error.message);
                return;
            }else {
                if(responseObj.data.type == 'warn'){
                    msg='已付款，确认取消本次采购吗？';
                }
            }
            Ext.MessageBox.confirm(tipTitle, msg,function(option){
                if(option === 'yes'){
                    Ext.Ajax.request({
                        url:url,
                        method: 'POST',
                        success: function (response, options) {
                            var resopnseText = response.responseText;
                            var responseObj = JSON.parse(resopnseText);
                            if(responseObj.error){
                                TipsUtil.showTips('提示',responseObj.error.message);
                            }else{
                                me.getView().callback();
                                me.getView().close();
                            }

                        }
                    })
                }
            })
        })

    },
    _cancelCheck: function (checkUrl) {
        var deferred = new Ext.Deferred();
        Ext.Ajax.request({
            url:checkUrl,
            method: 'POST',
            success: function (response, options) {
                deferred.resolve(response);
            }
        })
        return deferred.promise;
    },
    save: function (type) {
        var viewCtr = this;
        var view = this.getView();
        var vm = this.getViewModel();
        var formPanel = this.getView().down("form");
        var form = formPanel.getForm();
        var values = form.getValues();
        switch (type) {
            case 'draft':
                values.status = 'DRAFT';
                break;
            case 'pending':
                values.status = 'PENDING_RECEIVE';
                break;
            case 'cancel':
                values.status = 'CANCELLED';
                break;
        }

        var url = '/api/purchase/order';
        if(values.id) {
            url += '/update/'+values.id;
        } else {
            url += '/add';
        }
        if (!form.isValid()) {
            return false;
        }
        var orderDetailWindowStore =  vm.getStore('OrderDetailWindowStore');
        var lines = [];
        var recordIsValid = true;
        if(orderDetailWindowStore.getData().length<=1){
            TipsUtil.showTips('提示', '请添加采购列表','info');
            return;
        }
        orderDetailWindowStore.each(function (record){
            if(!record.get('skuId'))return;
            recordIsValid = viewCtr.validaRecord(record);
            if(!recordIsValid)return;
            lines.push(record.getData());
        })
        Ext.each(lines, function(line){
           if(!line.id||!Ext.isNumber(line.id)){
                delete line.id;
            };
            line.status = values.status;
        })
        if(!recordIsValid){
            return false;
        }
        values.lines = JSON.stringify(lines);
        form.submit({
            waitTitle : '提示',
            waitMsg : '正在提交数据请稍后...',
            url : url,
            params: values,
            submitEmptyText: false,
            method : 'post',
            success : function(form, action) {
                var flag=action.result.success;
                if(flag) {
                    view.callback();
                    viewCtr.getView().close();
                } else {
                    TipsUtil.showTips('错误', json.result.error.message);
                }

            },
            failure : function(form,action) {
                if(action.result){
                    var message=""||action.result.error.message;
                    TipsUtil.showTips('错误', message);
                }else{
                    TipsUtil.showTips('错误', message);
                }

            }
        });
    },
    close: function(button, e, eOpts) {
        this.getView().close();
    },

    validaRecord: function (record) {
        var purchaseQty = record.get('purchaseQty');
        var proportion = record.get('proportion');
        var price = record.get('price');
        if(purchaseQty<1||!Ext.isNumber(purchaseQty)){
            TipsUtil.showTips('提示', '采购数量为正整数，且不能为空','info');
            return false;
        }
        if(proportion<1||!Ext.isNumber(proportion)){
            TipsUtil.showTips('提示', '比例为正整数，且不能为空','info');
            return false;
        }
        if(price<1||!Ext.isNumber(purchaseQty)){
            TipsUtil.showTips('提示', '采购单价为正数，且不能为空','info');
            return false;
        }
        return true;
    },
    /**
     * 选择商品
     */
    chooseGoods: function () {
        var me = this;
        var view = me.getView();
        var dialog = Ext.create('Common.view.GoodsChooseDialog', {
            parent: view,
            callback: function(records){
                me.addGoods(records)
            }
        });
        var dialogStore = dialog.getViewModel().getStore("gridStore");
        dialogStore.load();
        dialog.show();
    },

    addGoods: function (records) {
       var me = this;
       var view = this.getView();
       var grid = view.down('grid');
       var vm = this.getViewModel();
       var orderDetailWindowStore = vm.getStore('OrderDetailWindowStore');
       var purchaseOrderCons = orderDetailWindowStore.getModel();
       var map = new Ext.util.HashMap();
       var selectedRecord = grid.getSelectionModel().getSelection()[0];
        orderDetailWindowStore.each(function(record){
            map.add(record.get('skuId'),record);
       })
       var index = 0;
       Ext.each(records,function(data){
        var purchaseOrder = new purchaseOrderCons();
        me.writeLine(purchaseOrder,data);
        if(map.containsKey(purchaseOrder.get('skuId')))return;//去掉重复
        index++;

        if(index == 1) {
            me.writeLine(selectedRecord,data);
        }else {
            orderDetailWindowStore.add(purchaseOrder);
        }
       })
        var initRecord = {'purchaseQty':1,'proportion':1,'quantity':1}
        orderDetailWindowStore.each(function(record){
            if(record&&record.get('skuId')){
            }else{
                 orderDetailWindowStore.remove(record);
             }
        })
       orderDetailWindowStore.add(initRecord);
    },
    writeLine: function(record,data){
        var vm = this.getViewModel();
        var formData = vm.get('formData');
        var expectedReceiptDate = formData.expectedReceiptDate;
        var skuInfo = {
            skuId: '',
            skuCode: '',
            skuName: '',
            productCode: '',
            productName: '',
            purchaseUnit: '',
            proportion: '',
            unit:''
        };
        for(pro in skuInfo) {
            record.set(pro,data[pro])
        }
        record.set('purchaseQty',1);
        record.set('proportion',1);
        record.set('quantity',1);
        record.set('price',0.00);
        if(expectedReceiptDate){
            record.set('expectedReceiptDate',expectedReceiptDate);
        }
    },
    onCommandColumnClick: function (btn, event) {
        var viewCtr = this,
            command = btn.command,
            grid = viewCtr.getView().down('grid'),
            record = btn.ownerCt.getWidgetRecord();

        event.stopEvent();
        grid.getSelectionModel().select(record);

        if (command == 'Delete') {
            viewCtr._deleteRecord(record);
        }
    },

    _deleteRecord: function (record) {
        if (!record.get('skuId')) return;
        var store = this.getView().down('grid').store;
        Ext.MessageBox.confirm('提示', '确认删除？', function (option) {
            if (option === 'yes') {
                store.remove(record);
            }
        })
    },

    refreshDate: function (item, value) {
        var vm = this.getViewModel();
        var orderDetailWindowStore = vm.getStore('OrderDetailWindowStore');
        var expectedReceiptDate = value;
        if (!expectedReceiptDate) return;
        orderDetailWindowStore.each(function(record){
            record.set('expectedReceiptDate',expectedReceiptDate);
        })
    },

    changePurchaseQty: function(item, newValue, oldValue) {
        if(newValue<1||!Ext.isNumber)return;
        var vm = this.getViewModel();
        var view = this.getView();
        var grid = view.down('grid');
        var record = grid.getSelectionModel().getSelection()[0];
        var proportion = record.get('proportion');
        var quantity = newValue*proportion;
        record.set('quantity',quantity);
        var price = record.get('price');
        var lineTotal = price*quantity;
        record.set('lineTotal',lineTotal);
    },

    changeProportion: function(item, newValue, oldValue) {
        if(newValue<1||!Ext.isNumber)return;
        var vm = this.getViewModel();
        var view = this.getView();
        var grid = view.down('grid');
        var record = grid.getSelectionModel().getSelection()[0];
        var purchaseQty = record.get('purchaseQty');
        var quantity = newValue*purchaseQty;
        record.set('quantity',quantity);
        var price = record.get('price');
        var lineTotal = price*quantity;
        record.set('lineTotal',lineTotal);
    },

    changePrice: function(item, newValue, oldValue) {
        if(newValue<0.01||!Ext.isNumber)return;
        var vm = this.getViewModel();
        var view = this.getView();
        var grid = view.down('grid');
        var record = grid.getSelectionModel().getSelection()[0];
        var quantity = record.get('quantity');
        var lineTotal = newValue*quantity;
        record.set('lineTotal',lineTotal);
    }

});
