/*
 * File: app/view/MyViewportViewController.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('StockTransfer.view.MyViewportViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.myviewport',
  requires: [
    'Common.view.PrintWindow'
  ],
  init: function() {
  },
  onCommandColumnClick: function (btn, event) {
    var me = this,
      command = btn.command,
      grid = me.getView().down('grid'),
      record = btn.ownerCt.getWidgetRecord();

    event.stopEvent();
    grid.getSelectionModel().select(record);

    if (command == 'Update') {
      me._openUpdateDialog(record);
    } else if (command == 'Print') {
      me._openPrintDialog(record);
    }
  },
  _openPrintDialog: function(record) {
    Ext.MessageBox.confirm('提示', '确定打印单号'+record.get('baseNo')+'这张单据吗？',function(option) {
      if (option === 'yes') {
        var dialog = Ext.create('Common.view.PrintWindow', {
          printOption: {
            method: 'POST',
            url: '/api/inventory/stock-transfer-print.html',
            params: {transferId: record.id}
          }
        });
        dialog.show();
      }
    });
  },

  _openUpdateDialog: function (record) {
    if(record.get("status")!= 'DRAFT') {
      return;
    }
    var me = this;
    var grid = me.getView().down('grid');

    this.__openWindow({isEdit: true, record: record})
  },
  __openWindow: function (option) {
    var me = this;
    var option = option || {};
    var stWindow = Ext.create('StockTransfer.view.StockTransferEditWindow', {
      parent: me.getView(),
      callback: Ext.bind(me.refreshGrid, me)
    });
    var stViewModel = stWindow.getViewModel();

    if (option.isEdit && option.record) {
      stViewModel.set('isEdit', true);
      stViewModel.set('transferId', option.record.get("baseId"));
      var form = stWindow.down('form');
     /* form.loadRecord(option.record);*/
      stWindow.getController().initPage();
    } else {
    }
    stWindow.show();
  },

  onButtonAddClick: function (button, e, eOpts) {
    this.__openWindow();
  },
  onButtonClearClick: function () {
    var me = this;
    var viewModel = me.getViewModel();
    var form = Ext.ComponentQuery.query('form')[0];
    form.reset();

    var transferStore = viewModel.get("stockTransferStore");
    transferStore.load({page: 1});
/*
    var detailStore = viewModel.get("transferDetailStore");
    detailStore.removeAll();*/
  },
  onTableItemDblClick: function (dataview, record, item, index, e, eOpts) {
    this._openUpdateDialog(record);
  },
  onSelectionChange: function(dataview, selected, eOpts) {
    var me = this;
    var viewModel = me.getViewModel();
    var store = viewModel.getStore('transferDetailStore');

    if(selected.length == 0) {
      store.removeAll();
    } else if(selected.length == 1) {
      var record = selected[0];
      var transferId = record.get("baseId");
      if(transferId) {
        store.load({params: {transferId : transferId}});
      }
    }
  },
  refreshGrid: function () {
    var me = this;
    me.getView().query('form')[0].down('button').fireEvent('click')
  },
  renderStatus: function (status, meta, record) {
    var me = this;
    var viewModel = me.getViewModel();
    var store = viewModel.getStore("inStatusStore");
    var record = store.findRecord("code", status);
    return record ? record.get("name") : null;
  },
});
