/*
 * File: app/view/MyWindow.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AccountMgmt.view.SelectBranchDeptPositionDialog', {
  extend: 'Ext.window.Window',
  alias: 'widget.selectbranchdeptpositiondialog',

  requires: [
    'Ext.grid.Panel',
    'Ext.grid.column.RowNumberer',
    'Ext.view.Table',
    'Ext.grid.column.Action',
    'Ext.toolbar.Toolbar',
    'Ext.toolbar.Fill',
    'Ext.button.Button'
  ],

  modal: true,
  height: 211,
  width: 342,
  defaultListenerScope: true,
  layout: 'fit',
  title: '信息',

  items: [
    {
      xtype: 'gridpanel',
      border: false,
      title: '',
      columns: [],
      plugins: [
        new Ext.grid.plugin.CellEditing({
          pluginId: "selectIdCellEdit",
          clicksToEdit: 1,
          listeners: {
            beforeedit: 'onCellBeforeEdit'
          }
        })
      ]
    }
  ],
  listeners: {
    beforerender: "onBeforeRenderOperate"
  },
  dockedItems: [{
    xtype: 'toolbar',
    dock: 'top',
    items: [{
      xtype: "button",
      text: "添加",
      iconCls: "btn-add",
      handler: "onAddButtonClick"
    }]
  }, {
    xtype: 'toolbar',
    dock: 'bottom',
    ui: 'footer',
    items: [
      {
        xtype: 'tbfill'
      },
      {
        xtype: 'button',
        iconCls: 'btn-save',
        text: '保存',
        handler: "onSaveButtonClick"
      },
      {
        xtype: 'button',
        iconCls: 'btn-cancel',
        text: '取消',
        handler: "onCancelButtonClick"
      }
    ]
  }
  ],

  onAddButtonClick: function () {
    var view = this,
      grid = view.down("grid"),
      store = view.down("grid").getStore(),
      model = view.store.getModel(),
      rec = new model({
        name: "",
        type: store.comboxType
      });

    store.insert(0, rec);
    grid.getPlugin("selectIdCellEdit").startEditByPosition({
      row: 0,
      column: 2
    });
    store.addCounts = (++store.addCounts) || 1;

  },

  onRemoveClick: function (grid, rowIndex) {
    var view = this,
      store = grid.getStore();

    store.remove(store.getAt(rowIndex));
    store.addCounts = --store.addCounts;
  },

  onSaveButtonClick: function () {
    var me = this,
      grid = me.down("grid"),
      store = grid.getStore(),
      validateErrorInfo, gridDatas;

    if (!me.isStoreDirty(store)) {
      TipsUtil.showTips('提示', '当前数据没有变化，无需保存', TipsUtil.WARING);
      return ;
    }

    validateErrorInfo = me.getValidateErrorMessage(store);
    if (validateErrorInfo.length > 0) {
      TipsUtil.showTips("提示", validateErrorInfo.join('<br/>'), TipsUtil.WARING);
      return ;
    }

    gridDatas = me.getCurrPageDatas(store) || [];

    me.el.mask("正在保存，请稍候...");

    Ext.Ajax.request({
      url: store.getProxy().api['save'],
      params : {
        data: Ext.JSON.encode(gridDatas),
        type: store.comboxType
      },
      method : 'POST',
      timeout :60000,
      success : function(response, options) {
        var result = Ext.JSON.decode(response.responseText);
        me.el.unmask();
        if (result.success) {
          TipsUtil.showTips("提示", result.data, TipsUtil.INFO, function() {
            store.load();
            me.close();
          });
        } else {
          TipsUtil.showTips("提示", result.error.message, TipsUtil.WARING);
        }
      },
      failure : function(response, options) {
        me.el.unmask();
        TipsUtil.showTips('提示', "[" + response.status + "]: " + options.url + ":" + response.statusText, TipsUtil.ERROR);
      }
    });
  },

  onCancelButtonClick: function () {
    var view = this;
    if (view.isStoreDirty(view.store)) {
      Ext.MessageBox.confirm("警告", "当前页面数据已被修改，是否丢弃已修改的数据？", function (btnId) {
        if (btnId == 'yes') {
          view.store.rejectChanges();
          view.store.addCounts = 0;
          view.close();
        }
      });
    } else {
      view.close();
    }
  },

  onBeforeRenderOperate: function () {
    var view = this;
    columns = [{
      xtype: 'rownumberer'
    }, {
      xtype: 'actioncolumn',
      width: 30,
      sortable: false,
      menuDisabled: false,
      align: "center",
      items: [{
        iconCls: 'btn-delete',
        tooltip: '删除',
        scope: view,
        handler: view.onRemoveClick
      }]
    }];

    columns.push({
      xtype: 'gridcolumn',
      flex: 1,
      dataIndex: "name",
      align: 'center',
      text: view.columnText,
      editor: {
        allowBlank: false
      }
    });

    view.down("grid").setColumns(columns);
    view.down("grid").setStore(view.store);
    if (!view.store.isLoaded()) {
      view.store.load();
    }
  },

  isStoreDirty: function (store) {
    var dirty = store.getModifiedRecords().length;
    dirty = dirty || store.getNewRecords().length;
    dirty = dirty || store.getRemovedRecords().length;
    dirty = dirty || store.addCounts;

    return !!dirty;
  },

  getCurrPageDatas: function (store) {
    var resultArray = [];

    if (store.getCount() == 0) {
      return;
    }

    store.each(function (item) {
      var data = Ext.clone(item.data);
      if (!data.createDate) {
        delete data.id;
      }
      resultArray.push(data);
    });

    return resultArray;
  },

  getValidateErrorMessage: function (store) {
    var me = this,
      validateKeys = ['name'],
      nameItems = [],
      uniqueNameItems = [],
      validateResult = [];

    var rowNum = 0;
    store.each(function (item) {
      rowNum++;
      nameItems.push(item.get('name'));
      if (!item.isValid()) {
        var error = item.validate();
        var temp = [];
        Ext.Array.each(validateKeys, function (key) {
          var errorInfo = error.get(key);
          if (errorInfo && item.data.hasOwnProperty(key)) {
            temp.push(errorInfo.getMessage());
          }
        });
        if (temp.length > 0) {
          validateResult.push('第' + rowNum + '行数据:' + temp.join(' ; '));
        }
      } else {
        if (Ext.String.trim(item.data['name']) == '') {
          validateResult.push('第' + rowNum + '行数据:数据未填写');
        }
      }
    });

    uniqueNameItems = Ext.Array.unique(nameItems);
    if (uniqueNameItems.length != nameItems.length) {
      var map = new Ext.util.HashMap();
      Ext.Array.each(uniqueNameItems, function(item, index) {
        var searchIndex = [];
        Ext.Array.each(nameItems, function(temp, tempIndex) {
          if (item == temp && item !='' && temp != '') {
            searchIndex.push(tempIndex + 1);
          }
        });
        if (searchIndex.length > 1) {
          map.add(item, searchIndex);
        }
      });

      map.each(function(key, value, length){
        validateResult.push('第' + value.join(',') + '行数据:' + me.columnText + '名称[' + key + ']重复');
      });
    }
    return validateResult;
  },

  onCellBeforeEdit: function(editor, context, eOpts ) {
    if (context.colIdx == 2) {
      if (context.record.get('createDate')) {
        return false;
      }
    }
    return true;
  }
});