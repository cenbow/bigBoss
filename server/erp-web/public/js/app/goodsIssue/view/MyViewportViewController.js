/*
 * File: app/view/MyViewportViewController.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('GoodsIssue.view.MyViewportViewController', {
	extend: 'Ext.app.ViewController',
	alias: 'controller.myviewport',
	//添加杂项出库
	onAddDialogButtonClick: function (button, e, eOpts) {
		var me = this;
		Ext.create("GoodsIssue.view.AddDialog", {
			parent: me.getView(),
			callback: me.refreshGrid,
			scope: me,
			addFlag: 'true'
		}).show();
	},
	//商品查询
	onButtonGoodsChooseClick: function (button, trigger, e) {
		Ext.create("Common.view.GoodsChooseDialog").show();
	},

	onCommandColumnClick: function (btn, event) {
		var command = btn.command;
		event.stopEvent();

		var grid = this.lookupReference("goodsIssueGridpanel");
		var record = btn.ownerCt.getWidgetRecord();
		grid.getSelectionModel().select(record);

		if (command == 'update') {
			this._openEditDialog(record);
		}
		if (command == 'print') {
			this._openPrintDialog(record);
		}
	},

	_openPrintDialog: function(record) {
		var dialog = Ext.create('Common.view.PrintWindow', {
			printOption: {
				method: 'POST',
				url: '/api/inventory/goods-issue-print.html',
				params: {goodsIssueId: record.id}
			}
		});
		dialog.show();
	},

	onTableItemDblClick: function (dataview, record, item, index, e, eOpts) {
		if (record.get('status') !== '草稿') {
			return;
		}
		this._openEditDialog(record);
	},

	refreshGrid: function () {
		var me = this.scope;
		me.getView().query('form')[0].down('button').fireEvent('click');
	},

	// 编辑杂项出库
	_openEditDialog: function (record) {
		var me = this;
		var option = option || {};

		var viewModel = me.getViewModel();
		var issueTypeStore = viewModel.getStore("issueType");


		var view = Ext.create("GoodsIssue.view.AddDialog",
			{
				parent: me.getView(),
				callback: me.refreshGrid,
				scope: me,
				addFlag: 'false',
				record: record,
				issueTypeStore: issueTypeStore
			});//.show();
		//var stViewModel = view.getViewModel();
		//stViewModel.set('issueId', option.record.get("id"));
		var form = view.down('form');

		form.loadRecord(record);
		view.show();
	},

	//单击列表显示清单
	onGridItemSelect: function (dataviewmodel, record, index, eOpts) {
		var me = this;
		var viewModel = me.getViewModel();
		var store = viewModel.getStore('goodsIssueLines');

		var issueId = record.get("baseId");
		store.load({params: {issueId: issueId}});
	},

	//条件查询
	onButtonSearchClick: function (button, e, eOpts) {
		var me = this;
		var viewModel = me.getViewModel();
		var form = Ext.ComponentQuery.query('form')[0];
		var formData = form.getValues();
		var gridStore = viewModel.get("goodsIssueList");
		if (!formData.postDateS) {
			delete formData.postDateS;
		}
		if (!formData.postDateE) {
			delete formData.postDateE;
		}
		gridStore.reload({params: formData});

		var grid = this.getView().down('grid').getSelectionModel().getSelection()
	},

	//清空条件查询
	onButtonClearClick: function (button, e, eOpts) {
		var me = this;
		var viewModel = me.getViewModel();
		var form = Ext.ComponentQuery.query('form')[0];
		form.reset();

		var transferStore = viewModel.get("goodsIssueList");
		transferStore.load({page: 1});

		var detailStore = viewModel.get("goodsIssueLines");
		detailStore.removeAll();
	},

	renderType: function (typeId, meta, record) {
		var id = parseInt(typeId);
		var me = this;
		var viewModel = me.getViewModel();
		var store = viewModel.getStore("issueType");
		var record = store.getById(id);
		return record ? record.get("name") : null;
	},

});
