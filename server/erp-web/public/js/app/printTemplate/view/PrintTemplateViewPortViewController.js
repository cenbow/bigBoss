/*
 * File: app/view/PrintTemplateViewPortViewController.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PrintTemplate.view.PrintTemplateViewPortViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.printtemplateviewport',

  options: {
    add: function () {
      Ext.create("PrintTemplate.view.TemplateInfoWindow").show();
    },
    update: function (record) {
      var window = Ext.create("PrintTemplate.view.TemplateInfoWindow");
      if (record.get('isSysCopied') == 'yes') {
        window.getViewModel().set('isEdit', true);
      }
      window.down('form').loadRecord(record);
      window.show();
    },
    resume: function (record) {
      Ext.MessageBox.confirm('提示', '确认恢复模板:【' + record.get('name') + '】的系统设置吗？', function (option) {
        if (option === 'yes') {
          Ext.Ajax.request({
            url: '/api/general/print/template/resume/' + record.get('id'),
            success: function (response, opts) {
              var res = JSON.parse(response.responseText);
              if (res.success) {
                record.set(res.data);
                record.commit();
              } else {
                Ext.Msg.alert("提示", res.error.message);
              }
            }
          });
        }
      });
    },
    delete: function (record) {
      Ext.MessageBox.confirm('提示', '确认删除模板:【' + record.get('name') + '】吗？', function (option) {
        if (option === 'yes') {
          Ext.Ajax.request({
            url: '/api/general/print/delete',
            method: 'POST',
            params: {
              id: record.get('id')
            },
            success: function (response, opts) {
              var res = JSON.parse(response.responseText);
              if (res.success) {
                var store = record.store;
                store.remove(record);
                if (store.getCount() == 0 && store.currentPage != 0) {
                  store.reload({page: store.currentPage - 1});
                } else {
                  store.reload();
                }
              } else {
                Ext.Msg.alert("提示", res.error.message);
              }
            }
          });
        }
      });
    },

    downLoad: function (record) {
      window.location.href = '/api/general/download-' + record.get('id') + '.html';
    }
  },

  select: function (rowmodel, record, index, eOpts) {
    var id = record.get('id');
    Ext.get("preview").dom.src = '/api/general/preview-' + id + '.html?_dt=' + new Date().getTime()
  },

  addPrintTemp: function () {
    Ext.isFunction(this.options['add']) && this.options['add']();
  },

  itemdblclick: function (dataview, record) {
    Ext.isFunction(this.options['update']) && this.options['update'](record);
  },

  onCommandColumnClick: function (button, e) {
    Ext.isFunction(this.options[button.command]) && this.options[button.command](button.ownerCt.getWidgetRecord());
  },

  onButtonSearchClick: function (field) {
    this.getGrid(field);
  },

  onSearchEnter: function (field, e) {
    if (e.getKey() == Ext.EventObject.ENTER) {
      this.getGrid(field);
    }
  },

  getGrid: function (field) {
    var gridStore = Ext.getStore('GridStore');
    gridStore.reload({
      params: {
        name: field.getValue().trim()
      }
    });
  }
});
