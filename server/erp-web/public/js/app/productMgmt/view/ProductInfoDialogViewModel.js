/*
 * File: app/view/EditDialogViewModel.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ProductMgmt.view.ProductInfoDialogViewModel', {
  extend: 'Ext.app.ViewModel',
  alias: 'viewmodel.productinfodialog',
  requires: [
    'ProductMgmt.store.ProductInfoDialogGridStore',
    'ProductMgmt.store.MainViewportTreeStore'
  ],

  data: {
    formData: {},
    referController: null
  },

  formulas: {
    disabled: function (get) {
      var formData = get('formData');
      return formData.id ? true : false;
    }
  },

  stores: {
    skugridstore: {
      type: 'productinfodialoggridstore',

      loadSkuDatas: function(datas) {
        var store = this;

        Ext.Array.each(datas, function(data) {
          data.isFromDb = true;
          store.add(data);
          store.commitChanges();
        });
      },

      insertNewRec: function() {
        var store = this, model = store.getModel(),
            rec;

        rec = new model({
          skuCode: '',
          skuName: '',
          barCode: '',
          property: '',
          salePrice: 0,
          marketPrice: 0,
          weight: 0,
          size: 0,
          unit: '',
          purchaseUnit: '',
          proportion: 1
        });

        store.insert(0, rec);
      },

      isDirty: function() {
        var store = this,
            dirty;

        dirty = store.getModifiedRecords().length
        dirty = dirty || store.getNewRecords().length;
        dirty = dirty || store.getRemovedRecords().length;
        dirty = dirty || store.addCounts;

        return !!dirty;
      },

      populateDataByAsignField: function(field, value) {
        var store = this;

        if (store.getCount() == 0) {
          return false;
        }

        store.each(function(item) {
          item.set(field, value);
        });
        return true;
      },

      getCurrPageDatas: function() {
        var store = this,
            resultArray = [];

        if (store.getCount() == 0) {
          return ;
        }

        store.each(function(item) {
          var data = Ext.clone(item.data);
          if (!data.isFromDb) {
            delete data.id;
          }
          resultArray.push(data);
        });

        return resultArray;
      },

      getValidateErrorMessage: function() {
        var store = this,
            validateKeys = ["skuCode", "skuName", "barCode", "property",  "salePrice", "marketPrice",  "weight", "size", "unit", "purchaseUnit", "proportion"],
            validateResult = [];

        var rowNum = 0;
        store.each(function(item) {
          rowNum++;
          if (!item.isValid()) {
            var error = item.validate();
            var temp = [];
            Ext.Array.each(validateKeys, function(key) {
              var errorInfo = error.getByKey(key);
              if (errorInfo && item.data.hasOwnProperty(key)) {
                temp.push(errorInfo.getMessage());
              }
            });
            if (temp.length > 0) {
              validateResult.push('第' + rowNum + '行数据:' + temp.join(' ; '))
            }
          }
        });

        return validateResult;
      }
    },

    categorystore: {
      type: 'mainviewporttreestore'
    }
  }

});