/*
 * File: app/view/AreaChooseWindowViewController.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ExpressMgmt.view.AreaChooseWindowViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.areachoosewindow',
  initPage: function (areas, othSelAreas) {
    var me = this;
    var viewModel = me.getViewModel();
    var treeStore = viewModel.getStore('areatreeviewstore');

    //treeStore may haven't init the data
    treeStore.on('load', function() {
      Ext.Array.each(areas, function (item) {
        var record = treeStore.findNode('id', item);
        if (record) {
          record.set('checked', true);

        }
      });

      Ext.Array.each(othSelAreas, function (item) {
        var record = treeStore.findNode('id', item);
        if (record) {
          record.set('checked', null);
          var parent = record.parentNode;
          if(parent) {
            parent.set("checked", null);
          }
        }
      });
    });

  },
  onButtonSelectClick: function (button, e, eOpts) {
    var view = this.getView();
    var model = this.getViewModel();
    var checkedItems = view.down('treepanel').getChecked();
    var parentCtrl = model.get('parentCtrl');
    this.getView().callback(checkedItems, parentCtrl);
    this.getView().close();
  },

  onButtonCancelClick: function (button, e, eOpts) {
    this.getView().close();
  },
  onViewItemClick: function (dataview, record, item, index, e, eOpts) {
    var me = this;
    var checked = record.get('checked');
    if (record.childNodes && record.childNodes.length) {
      Ext.each(record.childNodes, function (child) {
        child.set('checked', checked);
      });
    }

    var parent = record.parentNode;
    if (parent && parent.get("checked") !== null) {
      var sameStatus = me._allChildInCheckedStatus(parent);
      if (sameStatus) {
        parent.set('checked', true);
      } else {
        parent.set('checked', false);
      }
    }

  },
  _allChildInCheckedStatus: function (parent) {
    if (parent.childNodes && parent.childNodes.length) {
      var count = 0;
      Ext.each(parent.childNodes, function (child) {
        var checked = child.get('checked');
        if (checked) {
          count++;
        }
      });
      return count == parent.childNodes.length
    }
    return false;
  }

});
