/*
 * File: app/view/OrderManuallyViewportViewController.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('OrderManually.view.OrderManuallyViewportViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.ordermanuallyviewport',

  nameDeep: true,
  namePrefix: '',

  onDeleteButtonClick: function (button) {
    var viewModel = this.getViewModel(),
        store = viewModel.getStore('gridstore'),
        count = store.getCount(),
        record = button.ownerCt.getWidgetRecord(),
        recordIndex = store.indexOf(record);
    if(count-1 != recordIndex){
      store.remove(record);
    }
    var _store = store.removeAll();
    store.loadRecords(_store);
  },

  onButtonChooseClick: function () {
    var self = this;
    self.getViewModel().set("mustUnique", true);
    var dialog = Ext.create('Common.view.GoodsChooseDialog',{
      parent:self.getView(),
      callback:self.goodsChooseCallback,
      scope:self
    });
    dialog.getViewModel().get("gridStore").load();
    dialog.show();
  },

  goodsChooseCallback: function (records) {
    var store = this.scope.getViewModel().getStore('gridstore'),
        record = this.scope.getView().down('grid').getSelectionModel().getSelection()[0],
        _index = store.indexOf(record),
        count = store.getCount(),
        _headRecords = [],
        flag = true,
        result;
    Ext.each(records, function (sku) {
      var record = store.getById(sku.skuId);
      if (record) {
        TipsUtil.showTips("错误", "添加重复商品");
        flag = false;
      }
    });
    if(!flag){
      return;
    }
    var _records = store.removeAll();
    if(_index == count -1){
      _headRecords = _records.splice(0,_index);
    }else{
      _headRecords = _records.splice(0,_index+1);
    }
    result = _headRecords.concat(records).concat(_records);
    store.add(result);
  },

  commonAreaList: function(field){
    var nextField = field.nextSibling(),
        nextSField = nextField.nextSibling();
    nextField.reset();
    if(nextSField.store) nextSField.reset();
    nextField.getStore().load({params:{parentId:field.getValue()}});
  },

  customerChange: function(field){
    var tempPrefix,
        _this = this,
        name = field.rawValue,
        store = field.getStore();
    if(!name || !name.toString().trim()){
      _this.nameDeep = true;
      store.removeAll();
      return;
    }
    tempPrefix = name.charAt(0);
    if(_this.namePrefix != tempPrefix){
      _this.namePrefix = tempPrefix;
      nameDeep = true;
    }
    if(_this.nameDeep){
      _this.nameDeep = false;
      store.load({
        params:{
          name: _this.namePrefix,
          shopId:  _this.lookupReference('form').getForm().getValues().shopId
        },
        callback: function(){
          field.doQuery(name);
        }
      });
    }else{
      field.doQuery(name);
    }
  },

  checkShopId: function () {
    var panel = this.lookupReference('form'),
        field = panel.getForm().findField('shopId');
    if(!field.getValue()){
      field.focus();
      TipsUtil.showTips('提示', '请先选择店铺名称', TipsUtil.WARING);
    }
  },

  openConsigneeWindow: function (field) {
    var customerId = field.previousSibling().previousSibling().getValue(),
        _this = this,
        form = _this.lookupReference('form'),
        window = Ext.create('OrderManually.view.ConsigneeWindow',{callback:function(record){
          var provinceId = record.get('provinceId'),
              cityId = record.get('cityId');
          var arrObject = {
            flag: 0x0,
            form: form,
            record: record,
            index: 0,
            arr:[{id:provinceId,index:0x1,store:Ext.getStore('orderManually.city')},
            {id:cityId,index:0x2,store:Ext.getStore('orderManually.district')}]};
          _this._loadCustomerRecord(arrObject,_this);
        }});
    if(customerId && Ext.isNumber(customerId)){
      window.getViewModel().getStore('detailwindowstore').load({ params:{customerId: customerId}});
    }
    window.show();
  },

  onCancelButtonClick: function () {
    var viewModel = this.getViewModel(),
      store = viewModel.getStore('gridstore');
    this.lookupReference('form').reset();
    store.reload();
  },

  _loadCustomerRecord: function(obj,_this){
    if(obj.arr.length > obj.index && obj.arr[obj.index].id) {
      obj.flag |= obj.arr[obj.index].index;
      obj.arr[obj.index].store.load({
        params:{parentId:obj.arr[obj.index].id},
        callback: function(){
          if((obj.flag ^= this) == 0){
            obj.form.loadRecord(obj.record);
          }
        }.bind(obj.arr[obj.index].index)
      });
      obj.index ++;
      _this._loadCustomerRecord(obj,_this);
    }
  }
});
