/*
 * File: app/view/StockTakingDetailWindowViewController.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('StockTaking.view.StockTakingDetailWindowViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.stocktakingdetailwindow',

  requires: [
    'Common.ux.StoreLoadCoordinator'
  ],

  onCommandColumnClick: function (btn, event) {
    var viewCtr = this,
      command = btn.command,
      grid = viewCtr.getView().down('grid'),
      record = btn.ownerCt.getWidgetRecord();

    event.stopEvent();
    grid.getSelectionModel().select(record);

    if (command == 'Delete') {
      viewCtr._deleteRecord(record);
    }
  },

  _deleteRecord: function (record) {
    var model = this.getViewModel();
    var store = model.getStore('detailGridStore');
    //var store = Ext.StoreManager.getByKey('DetailGridStore');
    Ext.MessageBox.confirm('提示', '确认删除？', function (option) {
      if (option === 'yes') {
        store.remove(record);
      }
    })
  },

  editRow: function() {
    var me = this, view = me.getView();
    var grid = view.down('grid'), selection = grid.getSelectionModel().getSelection();

  },

  onButtonChooseClick: function () {
    var me = this;
    me._openChooseDialog();
  },
  _openChooseDialog: function (records) {
    var self = this;
    var vm = self.getViewModel();
    var dialog = Ext.create('Common.view.GoodsChooseDialog',{
      parent:self.getView(),
      callback:self.goodsChooseCallback,
      scope:self
    });
    var dialogStore = dialog.getViewModel().get("gridStore");

    if (records && Array.isArray(records)) {
      Ext.each(records, function (record) {
        var model = new dialogStore.model(record);
        dialogStore.add(model);
      })
    } else {
      dialogStore.load();
    }
    if(records) {
      //搜索barCode
      vm.set("mustUnique", false);
    } else {
      vm.set("mustUnique", true);
    }
    dialog.show();
  },
  goodsChooseCallback: function (records) {
    var self = this.scope,
      view = self.getView(),
      model = self.getViewModel(),
      store = model.getStore('detailGridStore'),
      grid = view.down('grid'),
      selections = grid.getSelectionModel().getSelection();

    var isMustUnique = self.getViewModel().get('mustUnique');
    var options = {selections:selections,mustUnique:isMustUnique};
    self._addSkuListIntoStore(store,records,options);
  },
  _addSkuListIntoStore: function (store,records,options) {
    var options = options || {};
    var index = 0;
    store.queryBy(function(item){
      options.selections = options.selections || [];
      var selection = options.selections[0] || {};
      if(isNaN(item.id) && selection.id != item.id){
        options.selections.push(item);
      }
    });

    var whs = Ext.ComponentQuery.query("#whs")[0];
    var whsId = whs.value;

    if(records && Ext.isArray(records)){
      Ext.each(records,function (sku) {
        var record = store.getById(sku.skuId);
        if(record && options.mustUnique){
          TipsUtil.showTips("错误", "添加重复商品");
          return false;
        }
        var afterQty = parseInt(sku.purchaseQty || 1);
        if(!record){
          if(options.selections && options.selections.length && options.selections.length > index){
            record = options.selections[index];
            for (var key in sku) {
              record.set(key, sku[key])
            }
          }else{
            record = new store.model(sku);
            store.add(record);
          }
          record.set('afterQty',afterQty);
        }else{
          record.set('afterQty',record.get('afterQty')+afterQty);
          record.set('differenceLineTotal',parseInt(record.get('differenceQty'))*record.get('differencePrice'));
        }

        record.set('differenceQty',parseInt(record.get('afterQty')) - parseInt(record.get('beforeQty')));
        record.set('whsId',whsId);

        index++;
      })
    }

  },

  onButtonLineAddClick: function (button, e, eOpts) {
    var model = this.getViewModel();
    var store = model.getStore('detailGridStore');
    var exist = false;
    store.queryBy(function (item) {
      var skuId = item.get('skuId');
      if(isNaN(skuId)){
        exist = true;
      }
    });
    if(!exist){
      store.add({});
    }
  },

  onWhsChange: function (option) {
    var me = this;
    var viewModel = me.getViewModel();

    var whsId = option.getValue();
    var store = viewModel.getStore("commonwhsareastore");
    if (store && Number.isInteger(parseInt(whsId))) {
      store.load({
        params: {id: whsId},
        scope: store
      });
    }
    var gridstore = viewModel.getStore('detailGridStore');

    gridstore.queryBy(function (item) {
      item.set('whsId', whsId);
    })
  },

  renderAreaStore: function (whsAreaId, meta, record) {
    var me = this;
    var viewModel = me.getViewModel();
    var store = viewModel.getStore("commonwhsareastore");
    var whsRecord = store.getById(whsAreaId);
    //grid上返回库区显示
    return whsRecord ? whsRecord.get("name") : null;
  },

  selectedArea:function(combox){
    var record = combox.ownerCt.up('grid').getSelectionModel().getSelection()[0];
    var me = this;
    var whsAreaId = combox.lastValue;
    me.getStockQty(record,whsAreaId);
    me.getStockPrice(record,whsAreaId);
    me.getPickLoc(record,whsAreaId);
  },

  getStockQty: function (record,whsAreaId) {
    var whsId = record.get('whsId')?record.get('whsId'):this.getViewModel().get('whsId'),
      skuId = record.get('skuId');

    if (whsId && whsAreaId) {
      Ext.Ajax.request({
        method: 'GET',
        url: '/api/product/sku/stock',
        params: {whsId: whsId, whsAreaId: whsAreaId, skuId: skuId},
        success: function (request) {
          if (request.responseText) {
            var json = Ext.decode(request.responseText);
            if (json.success) {
              var stock = json.data;
              if (stock) {
                record.set("beforeQty", stock.quantity);
              } else {
                record.set("beforeQty", 0);
              }
              record.set('differenceQty',parseInt(record.get('afterQty')) - parseInt(stock?stock.quantity:0));
            } else {
              TipsUtil.showTips("错误", json.error.message || "服务器错误！");
            }
          }
        }
      });
    } else {
      record.set("beforeQty", 0);
    }
  },

  getStockPrice: function (record,whsAreaId) {
    var whsId = record.get('whsId')?record.get('whsId'):this.getViewModel().get('whsId'),
      skuId = record.get('skuId');

    if (whsId && whsAreaId) {
      Ext.Ajax.request({
        method: 'GET',
        url: '/api/product/sku/price',
        params: {whsId: whsId, whsAreaId: whsAreaId, skuId: skuId},
        success: function (request) {
          if (request.responseText) {
            var json = Ext.decode(request.responseText);
            if (json.success) {
              var stock = json.data;
              if (stock) {
                record.set("beforePrice", stock.stockPrice);
              } else {
                record.set("beforePrice", 0);
              }
            } else {
              TipsUtil.showTips("错误", json.error.message || "服务器错误！");
            }
          }
        }
      });
    } else {
      record.set("beforePrice", 0);
    }
  },

  getPickLoc: function (record,whsAreaId) {
    var whsId = record.get('whsId')?record.get('whsId'):this.getViewModel().get('whsId'),
      skuId = record.get('skuId');

    if (whsId && whsAreaId && skuId) {
      Ext.Ajax.request({
        method: 'GET',
        url: '/api/inventory/warehouse/pickloc/view',
        params: {skuId: skuId, whsId: whsId, whsAreaId: whsAreaId},
        success: function (request) {
          if (request.responseText) {
            var json = Ext.decode(request.responseText);
            if (json.success) {
              if (json.data) {
                record.set("whsPickLoc", json.data.location);
              } else {
                record.set("whsPickLoc", '');
              }
            } else {
              TipsUtil.showTips("错误", json.error.message || "服务器错误！");
            }
          }
        }
      })
    } else {
      record.set("whsPickLoc", '');
    }
  },

  qtyChange: function (options) {
    var grid = this.getView().down('grid'),
        selections = grid.getSelectionModel().getSelection(),
        value = options.value,
        record = selections?selections[0]:{};

    if(isNaN(value) || parseInt(value)<0){
      TipsUtil.showTips("错误", "盘点数量为非负整数");
      record.set('afterQty',0);
      record.set('differenceQty',0 - parseInt(record.get('beforeQty')));
      record.set('differenceLineTotal',parseInt(record.get('differenceQty'))*record.get('differencePrice'));
      return;
    }

    record.set('differenceQty',parseInt(parseInt(value) - record.get('beforeQty')));
    record.set('differenceLineTotal',parseInt(record.get('differenceQty'))*record.get('differencePrice'));
  },
  priceChange: function (options) {
    var grid = this.getView().down('grid'),
        selections = grid.getSelectionModel().getSelection(),
        value = options.value,
        record = selections?selections[0]:{};

    record.set('differenceLineTotal',parseInt(record.get('differenceQty'))*value)
  },

  /**
   * 搜索条形码
   * @param field
   * @param e
   */
  onFastSearch: function (field, e) {
    var me = this;
    if (e.getKey() === e.ENTER) {
      var text = field.getValue();
      if (text) {
        me._onFastSearchFn(text);
      }
    }
  },
  _onFastSearchFn: function (text) {
    var me = this;
    var viewModel = me.getViewModel();
    var store = viewModel.getStore("detailGridStore");

    Ext.Ajax.request({
      method: 'GET',
      url: '/api/product/summary/sku/barCode',
      params: {text: text},
      success: function (request) {
        if (request.responseText) {
          var json = Ext.decode(request.responseText);
          if (Array.isArray(json.data)) {
            if( json.data.length > 1) {
              me._openChooseDialog(json.data);
            } else {
              me._addSkuListIntoStore(store, json.data);
            }
          } else {
            TipsUtil.showTips("提示", json.error.message, 'error', function(){
              var fastSearchField = me.getView().down('#fastSearchField');
              fastSearchField.reset();
              fastSearchField.focus();
            });
          }
        }
      }
    });
  },


  submitDraft: function () {
    var submitData = this._dataForSubmit();
    submitData.status = 'DRAFT';
    if(submitData){
      this._submitData(submitData);
    }
  },

  submitApprove: function () {
    var submitData = this._dataForSubmit();
    submitData.status = 'PENDING_APPROVE';
    if(submitData){
      this._submitData(submitData);
    }
  },

  /**
   * 通过并更新库存
   */
  passAndUpdate: function () {
    var submitData = this._dataForSubmit();
    submitData.status = 'APPROVED';
    if(submitData){
      this._submitData(submitData);
    }
  },

  /**
   * 打回待审
   */
  returnWait: function () {
    var submitData = this._dataForSubmit();
    submitData.status = 'DRAFT';
    if(submitData){
     this._submitData(submitData);
    }
  },


  _dataForSubmit: function () {
    var self = this,
      view = self.getView(),
      model = self.getViewModel(),
      form = view.down('form'),
      store = model.getStore('detailGridStore');
    if(!form.isValid()){
      return false;
    }

    if(store.getCount == 0){
      TipsUtil.showTips("提示", "缺少商品信息");
      return;
    }

    var stockTaking = form.getValues() || {};
    if(!stockTaking.postDate){
      delete stockTaking.postDate;
    }

    var takingType = Ext.ComponentQuery.query('#takingType')[0];
    var takingTypeId = takingType.getValue();
    if(!takingTypeId){
      TipsUtil.showTips("提示","请选择盘点类型");
      return;
    }

    var whs = Ext.ComponentQuery.query("#whs")[0];
    var whsId = whs.getValue();
    if( isNaN(whsId) ) {
      TipsUtil.showTips("提示", "请选择仓库");
      return;
    }

    var lines = store.getRange();
    var lineArr = [];
    var noErrflag = true;
    Ext.each(lines, function (line) {
      var data = line.getData();
      if(data.whsId == 0){
        data.whsId = whsId;
      }
      lineArr.push(data);
      var skuId = line.get("skuId");
      var whsAreaId = line.get('whsAreaId');
      if(isNaN(skuId) || isNaN(whsAreaId)){
        TipsUtil.showTips("提示","商品信息有误");
        noErrflag = false;
        return false;
      }

    });

    if(!noErrflag){
      return;
    }

    stockTaking.stockTakingLines = Ext.encode(lineArr);
    return stockTaking;

  },

  _submitData: function (submitData) {
    var view = this.getView();
    Ext.Ajax.request({
      method: 'POST',
      url: '/api/inventory/stock/taking/in',
      params: submitData,
      success: function (request) {
        if (request.responseText) {
          var json = Ext.decode(request.responseText);
          if (json.success) {
            Ext.StoreMgr.get('GridStore').load();
            view.close()
          } else {
            TipsUtil.showTips("错误", json.error.message || "服务器错误！");
          }
        }
      }
    });
  },

  cancelWindow: function () {
    this.getView().close();
  },

  onButtonSearchClick: function (field) {
    this.filterGrid(field);
  },

  onSearchEnter: function (field, e) {
    if (e.getKey() == Ext.EventObject.ENTER) {
      this.filterGrid(field);
    }
  },

  filterGrid: function (field) {
    var me = this;
    var viewModel = me.getViewModel();
    var store = viewModel.getStore("detailGridStore");
    
    store.filterBy(function (record) {
      var value = field.getValue().trim().toUpperCase();
      if(value == ""){
        return true
      }else if(record.get('skuCode').toUpperCase().indexOf(value)>-1 ||
        record.get('skuName').toUpperCase().indexOf(value)>-1 ||
        record.get('skuId').toString().toUpperCase().indexOf(value)>-1 ||
        record.get('productCode').toUpperCase().indexOf(value)>-1){
        return true
      }
    })
  }
  
 

});
