/*
 * File: app/view/OrderRelatedInfoCommTabViewController.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Common.view.order.OrderRelatedInfoCommTabViewController', {
  extend: 'Ext.app.ViewController',
  alias: 'controller.order.orderrelatedinfocommtab',
  requires: [
    'Common.util.TipsUtil'
  ],
  uses: [
    'Common.view.GoodsChooseDialog',
    'Common.store.order.LogDiffDialogGridStore'
  ],

  /**
   * 加载页面数据
   */
  loadTabDatas: function(tab, record) {
    var viewCtr = this;

    viewCtr.dependRecord = record;

    Ext.Ajax.request({
      url: '/api/order/loadDatas/'  + record.get('id'),
      method: 'GET',
      timeout:6000,
      async: true,
      scope: viewCtr,
      success: '_onLoadTabDatasSuccess',
      failure: '_onLoadTabDatasFailure'
    });
  },

  /**
   * 加载页面数据成功
   */
  _onLoadTabDatasSuccess: function(response, opts) {
    var viewCtr = this;
    var viewModel = viewCtr.getViewModel();
    var result = Ext.decode(response.responseText);

    var tabreceivegoodsinfoformmodel = new Common.model.order.TabReceiveGoodsInfoFormModel(result.tabreceivegoodsinfoformmodel);
    var taborderremarkinfoformmodel = new Common.model.order.TabOrderRemarkInfoFormModel(result.taborderremarkinfoformmodel);
    var tabbasicinfoformmodel = new Common.model.order.TabBasicInfoFormModel(result.tabbasicinfoformmodel);
    var tabpaymentinfoformmodel = new Common.model.order.TabPaymentInfoFormModel(result.tabpaymentinfoformmodel);

    _echoTabEveryGridDatas(result);
    _echoProviceCityCountyComboDatas(result);

    viewModel.set("tabreceivegoodsinfoformmodel", tabreceivegoodsinfoformmodel);
    viewModel.set("taborderremarkinfoformmodel", taborderremarkinfoformmodel);
    viewModel.set("tabbasicinfoformmodel", tabbasicinfoformmodel);
    viewModel.set("tabpaymentinfoformmodel", tabpaymentinfoformmodel);

    viewModel.notify();

    return true;

    function _echoTabEveryGridDatas(result) {
      function _load(storeName) {
        var store = viewModel.getStore(storeName);
        var datas = result[storeName];
        var Model = store.getModel();
        store.removeAll();
        Ext.Array.each(datas, function (data) {
          store.add(new Model(data));
        });
      }

      _load('tabproductinfogridstore');
      _load('tabaftersalesgridstore');
      _load('taborderloggridstore');

    }

    function _echoProviceCityCountyComboDatas(result) {
      var provinceCombo = viewCtr.lookupReference("provinceCombo");

      if (result.tabreceivegoodsinfoformmodel && result.tabreceivegoodsinfoformmodel.A04) {
        provinceCombo.queryMode = 'local';
        var cityCombo = viewCtr.lookupReference("cityCombo");
        var countyCombo = viewCtr.lookupReference("countyCombo");
        var proviceStore = viewModel.getStore('provincestore');
        var cityStore = viewModel.getStore('citystore');
        var countyStore = viewModel.getStore('countystore');

        proviceStore.load();
        cityStore.load({
          params: { parentId:result.tabreceivegoodsinfoformmodel.A04 },
          callback: function() { cityCombo.setDisabled(false); }
        });
        countyStore.load({
          params: { parentId:result.tabreceivegoodsinfoformmodel.A05 },
          callback: function() { countyCombo.setDisabled(false); }
        });

      } else {
        provinceCombo.queryMode = 'remote';
      }
    }

  },

  /**
   * 加载页面数据失败
   */
  _onLoadTabDatasFailure: function(response, opts) {
    var result = Ext.decode(response.responseText);
    console.info(result);
  },

  /**
   * 省combobox选中
   */
  onComboboxProvinceSelect: function (combo, record, eOpts) {
    var cityCombo = combo.nextNode();
    var cityStore = cityCombo.getStore();
    var countyCombo = combo.nextNode().nextNode();
    var countyStore = countyCombo.getStore();

    cityCombo.reset();
    cityStore.removeAll();
    countyCombo.reset();
    countyStore.removeAll();
    cityCombo.setDisabled(false);
    countyCombo.setDisabled(true);

    cityStore.on('beforeload', function(cityStore) {
      cityStore.proxy.extraParams = {
        parentId: combo.getValue()
      };
    }, cityStore, {single: true});

    cityStore.load();
  },

  /**
   * 市combobox选中
   */
  onComboboxCitySelect: function(combo, record, eOpts) {
    var countyCombo = combo.nextNode();
    var countyStore = countyCombo.getStore();

    countyCombo.reset();
    countyStore.removeAll();
    countyCombo.setDisabled(false);

    countyStore.on('beforeload', function(countyStore) {
      countyStore.proxy.extraParams = {
        parentId: combo.getValue()
      };
    }, countyStore, {single: true});

    countyStore.load();
  },

  /**
   * tab页签通用保存
   */
  onButtonClickSaveTabCommon: function (button, e, eOpts) {
    var viewCtr = this;
    var formDataModel = viewCtr.getViewModel().get(button.saveType);

    if (!viewCtr.dependRecord) {
      TipsUtil.showTips("提示", '请选择一条订单记录', TipsUtil.WARING);
      return ;
    }

    if (!viewCtr.getView().down('form').isValid()) {
      TipsUtil.showTips("提示", '信息填写不正确，请检查后重新操作', TipsUtil.WARING);
      return ;
    }

    console.info(viewCtr.dependRecord);
    console.info(viewCtr.dependRecord.get('id'));
    formDataModel.set('parentId', viewCtr.dependRecord.get('id'));
    viewCtr.getViewModel().notify();

    viewCtr.getView().el.mask('正在保存数据，请稍候...');
    formDataModel.save({
      scope: viewCtr,
      success: '_onSaveTabCommonSuccess',
      failure: '_onSaveTabCommonFailure'
    });
  },

  /**
   * tab页签通用保存成功
   */
  _onSaveTabCommonSuccess: function(record, options) {
    var viewCtr = this;
    var result = Ext.JSON.decode(options.getResponse().responseText);

    viewCtr.getView().unmask();
    console.info(result);
  },

  /**
   * tab页签通用保存失败
   */
  _onSaveTabCommonFailure: function(record, options) {
    var viewCtr = this;
    var result;

    viewCtr.getView().el.unmask();
    if (options.getResponse()) {
      result = Ext.JSON.decode(options.getResponse().responseText);
      console.info(result)
    }
  },

  /**
   * tab页签通用取消
   */
  onButtonClickCancelTabCommon: function (button, e, eOpts) {
    var viewCtr = this;
    var formDataModel = viewCtr.getViewModel().get(button.saveType);

    if (formDataModel.dirty) {
      Ext.MessageBox.confirm("警告", "当前页面数据已被修改，是否丢弃已修改的数据？", function (btnId) {
        if (btnId == 'yes') {
          formDataModel.reject();
        }
      });
      return;
    }
  },

  /*明细商品单元格编辑前状态判断*/
  onCellBeforeEditCustom: function(editor, context ) {
    if (context.colIdx == 2) {
      if (context.record.get('A02') != 'magnam') {
        return false;
      }
    }
    return true;
  },

  /*编辑生效前数据校验*/
  onValidateEditCustom: function(editor,cell) {

    if(cell.field === 'A18') {
      var currValue = cell.value;
      if (currValue.length > 10) {
        TipsUtil.showNotify("提示", '长度限制在10个字符以内', TipsUtil.ERROR);
        return false;
      }
    }
    return true;
  },

  /*编辑生效后保存数据*/
  onEditCustom: function(editor,cell) {
    if(cell.field === 'A18' && cell.record.dirty) {
      cell.grid.getStore().commitChanges();
      TipsUtil.showNotify("提示", '保存成功', TipsUtil.INFO);
    }
  },

  /*商品编码列渲染*/
  onShopSkuRenderer: function(v) {
    return v == "magnam" ? ("<span style='color:red;'>" + v + "</span>") : v;
  },

  /*选择sku*/
  onButtonGoodsChooseClick: function() {
    var viewCtr = this;
    var tab = viewCtr.getView();
    var grid = tab.down('grid[customTabIndex=1]');
    var record = grid.getSelectionModel().getSelection()[0];

    var dialog = Ext.create('Common.view.GoodsChooseDialog', {
      singleMode: true,
      callback: function (records) {
        if (!records) {
          return;
        }
        record.set('A02', records[0].skuCode);
        dialogStore.commitChanges();
        TipsUtil.showNotify("提示", '保存成功', TipsUtil.INFO);
      }
    });

    var dialogStore = dialog.getViewModel().getStore("gridStore");
    dialogStore.load();
    dialog.show();
  },


  /**
   * 订单日志主页命令行操作
   */
  onCommandColumnLogDiffClick: function (btn, event) {
    var viewCtr = this,
      command = btn.command,
      grid = viewCtr.lookupReference('logDiffGrid'),
      record = btn.ownerCt.getWidgetRecord();

    event.stopEvent();
    grid.getSelectionModel().select(record);

    if (command == 'LogDiff') {
      viewCtr._openLogDiffDialog(record);
    }
  },

  /*订单日志-差异比较*/
  _openLogDiffDialog: function(record) {
    Ext.create('Common.view.order.LogDiffDialog');
  }
});
